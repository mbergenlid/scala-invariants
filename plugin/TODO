*========================================================================
* _____                    ____                _             _       _   
*|_   _|   _ _ __   ___   / ___|___  _ __  ___| |_ _ __ __ _(_)_ __ | |_ 
*  | || | | | '_ \ / _ \ | |   / _ \| '_ \/ __| __| '__/ _` | | '_ \| __|
*  | || |_| | |_) |  __/ | |__| (_) | | | \__ \ |_| | | (_| | | | | | |_ 
*  |_| \__, | .__/ \___|  \____\___/|_| |_|___/\__|_|  \__,_|_|_| |_|\__|
*      |___/|_|                                                          
*========================================================================


= Produce meaningful Error messages
* If variable constrained by another variable, we need to check that that
  variable hasn't changed since the constraint was verified.
  - Perhaps start by only allowing binding to vals in @Bounded

* Allow context to be built up while going through a boolean expression.
  - e.g. x > 0 && callMethodWith(x) -- callMethodWith should now be able
    to expect that its parameter is > 0

= Refactor the "assignable" test from MethodApplication
* Introduce more complex expressions

* Create a test 'framework' that will execute test programs in files.

* Generalise the Constraints in order to easily add Constraints for new types.

* Validate DefDef return values.
